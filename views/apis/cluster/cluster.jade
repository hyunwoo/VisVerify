//
   Created by hyunwoo on 11/10/15.

extends ../../intro_layout
//<link href='https://fonts.googleapis.com/css?family=Poiret+One' rel='stylesheet' type='text/css'>
block body
    div.head
        div(align='center' , style='margin-left:20px')
            h4.fit.
                Cluster
            h5.fit
                c2.
    div.container-fluid.content
        p
        div.center.c2.strike
            span
                h3
                    span.glyphicon.glyphicon-bookmark(style='font-size:17px')
                    | &nbsp;&nbsp;Overview
        .space
        div.row
            div.col-lg-4
                a.img-part.hvr-reveal(href='#', style='background-image: url("/img/apis/lda/abstract.png");')
                    text.space.animated.wow.fadeIn
                        h4.fit.c5 Overview
                        h5.fit.c6 Download LDA Topic Modeling Document
            div.col-lg-8.img-content
                h4.light(style='line-height: 160%;font-size:15px').
                    BODY
                p.double
                h4
                    div.strike.c4
                        span Description
                div.row
                    div.col-lg-6
                        h4.fit.light(style='line-height: 160%;font-size:15px').
                            <br><strong> 사용방법 :</strong>
                    div.col-lg-6
                        h4.fit.light(style='line-height: 160%;font-size:15px').
                            <br><strong> 주의사항 : </strong>
        p.double
        div.center.c4.strike
            span
                h3
                    span.glyphicon.glyphicon-play-circle(style='font-size:17px')
                    | &nbsp;&nbsp;Input Data (CSV File Format)
        .space

        div
            div.row
                div.col-sm-4(style='text-align:center')
                    .radio.radio-primary
                        input#radio3(type='radio', name='radio1', value='option1', onclick='onClickKMeans()')
                        label(for='radio3')
                            h3.light(style='margin-top:-7px') K-Means
                div.col-sm-4(style='text-align:center')
                    .radio.radio-primary
                        input#radio4(type='radio', name='radio1', value='option1', onclick='onClickDBScan()')
                        label(for='radio4')
                            h3.light(style='margin-top:-7px') DBScan
                div.col-sm-4(style='text-align:center')
                    .radio.radio-primary
                        input#radio5(type='radio', name='radio1', value='option1', onclick='onClickOptics()')
                        label(for='radio5')
                            h3.light(style='margin-top:-7px') Optics
            div.row
                div.col-sm-9
                    div#divKmeans(style='display: inline;')
                        div.row
                            div.col-sm-6
                                h4.light.fit(style='margin-bottom:5px') : Means Count
                                    input#KMeansMeansCount(placehorder="4",style='width:100%; height : 30px; padding-left:10px;', type="number")
                                h5.light.center(style='margin-top:-3px') number of clusters we want to cluster our data into
                            div.col-sm-6
                                h4.light.fit(style='margin-bottom:5px') : Iteration Count
                                    input#KMeansIterCount(placehorder="4",style='width:100%; height : 30px; padding-left:10px;', type="number")
                                h5.light.center(style='margin-top:-3px') number of iterations we want our k-means to run

                    div#divDBScan(style='display: none;')
                        div.row
                            div.col-sm-6
                                h4.light.fit(style='margin-bottom:5px') : Radius
                                    input#DBScanRadius(placehorder="4",style='width:100%; height : 30px; padding-left:10px;', type="number")
                                h5.light.center(style='margin-top:-3px') neighborhood radius
                            div.col-sm-6
                                h4.light.fit(style='margin-bottom:5px') : Number of point in neighborhood
                                    input#DBScanPoints(placehorder="4",style='width:100%; height : 30px; padding-left:10px;', type="number")
                                h5.light.center(style='margin-top:-3px') number of points in neighborhood to form a cluster
                    div#divOptics(style='display: none;')
                        div.row
                            div.col-sm-6
                                h4.light.fit(style='margin-bottom:5px') : Radius
                                    input#OpticsRadius(placehorder="4",style='width:100%; height : 30px; padding-left:10px;', type="number")
                                h5.light.center(style='margin-top:-3px') neighborhood radius
                            div.col-sm-6
                                h4.light.fit(style='margin-bottom:5px') : Number of point in neighborhood
                                    input#OpticsPoints(placehorder="4",style='width:100%; height : 30px; padding-left:10px;', type="number")
                                h5.light.center(style='margin-top:-3px') number of points in neighborhood to form a cluster
                div.col-sm-3
                    button.btn.btn-info(style='width:100%; height:50px; margin-top:25px', onclick='onCluster()')
                        h3.fit.light Cluster
        div
            p.double
            h4.light
                textarea#TextInput(style='width:100%; height:250px; padding-left : 10px', placeholder="Name, val1, val2, val3 \nOpt1, 1 , 2, 10\nOpt2, 3 , 5, 10\nOpt3, 5 , 5, 10\nOpt4, 9 , 8, 10", align='center')
                p.double
                div.center.c4.strike
                span
                h3.c4.fit(style='margin-left:15px')
                    span.glyphicon.glyphicon-erase(style='font-size:17px')
                    | &nbsp;&nbsp;Clustering Result
        div#result(style='margin:15px; ')
            div.row
                div.col-lg-9
                    h4.light Visualization :
                    div#renderer.border(style='width:100%;height:650px;')
                div.col-lg-3
                    h4.light Result Json :
                    pre(style='height:650px')
                        h5.light#JSONOutput
                p

    script.
        nv.utils.symbolMap.set('thin-x', function (size) {
            size = Math.sqrt(size);
            return 'M' + (-size / 2) + ',' + (-size / 2) +
                    'l' + size + ',' + size +
                    'm0,' + -(size) +
                    'l' + (-size) + ',' + size;
        });

        // create the chart
        var svg;
        var data = [];
        function updateGraphic(d) {
            var chart;
            if(svg != null)
                svg.remove();
            delete data;
            data = [];

            var shapes = ['thin-x', 'circle', 'cross', 'triangle-up', 'triangle-down', 'diamond', 'square'],
                    random = d3.random.normal();

            // make data
            var t = Object.keys(d.data)[0];
            var keys = Object.keys(d.data[t]);

            for(var i = 0 ; i < d.cluster.nodes.length; i ++){
                var group = {
                    key: 'Group ' + i,
                    values: []
                };


                for(var j = 0 ; j < d.cluster.nodes[i].length ; j ++){
                    var name = d.cluster.nodes[i][j];

                    if(!isNumber(d.data[name][keys[0]])) continue;
                    if(!isNumber(d.data[name][keys[1]])) continue;

                    group.values.push({
                        name : name,
                        x: Number(d.data[name][keys[0]]),
                        y: Number(d.data[name][keys[1]]),
                        size: 8,
                        shape: 'circle'
                    });
                }
                if(group.values.length != 0)
                    data.push(group);

            }

            if(d.cluster.noise != null){
                var noise = {
                    key: 'Noise',
                    values: []
                };

                for (var j = 0; j < d.cluster.noise.length; j++) {
                    var name = d.cluster.noise[j];

                    if (!isNumber(d.data[name][keys[0]])) continue;
                    if (!isNumber(d.data[name][keys[1]])) continue;

                    noise.values.push({
                        name: name,
                        x: Number(d.data[name][keys[0]]),
                        y: Number(d.data[name][keys[1]]),
                        size: 5,
                        shape: 'circle'
                    });
                }
                if(noise.values.length != 0)
                    data.push(noise);
                data.push(noise);
            }





            nv.addGraph(function () {

                chart = nv.models.scatterChart()
                        .showDistX(true)
                        .showDistY(true)
                        .useVoronoi(true)
                        .color(d3.scale.category10().range())
                        .duration(300)
                ;
                chart.dispatch.on('renderEnd', function () {
                    console.log('render complete');
                });

                chart.xAxis.tickFormat(d3.format('.02f'));
                chart.yAxis.tickFormat(d3.format('.02f'));

                svg = d3.select('#renderer').append('svg');
                svg.datum(data)
                   .call(chart);

                //nv.utils.windowResize(chart.update);

                chart.dispatch.on('stateChange', function (e) {
                    ('New State:', JSON.stringify(e));
                });
                return chart;
            });



        }



        var currentSelect = "KMeans";
        function onClickKMeans() {
            currentSelect = "KMeans";
            console.log("onClickKMEAN")
            document.getElementById("divKmeans").style.display = "inline";
            document.getElementById("divDBScan").style.display = "none";
            document.getElementById("divOptics").style.display = "none";
        }
        function onClickDBScan() {
            currentSelect = "DBScan";
            document.getElementById("divKmeans").style.display = "none";
            document.getElementById("divDBScan").style.display = "inline";
            document.getElementById("divOptics").style.display = "none";
        }
        function onClickOptics() {
            currentSelect = "Optics";
            document.getElementById("divKmeans").style.display = "none";
            document.getElementById("divDBScan").style.display = "none";
            document.getElementById("divOptics").style.display = "inline";
        }

        function onCluster() {
            console.log("on cluster : " + currentSelect)
            var text = document.getElementById('TextInput').value;
            if (text == null || text == '')
                text = document.getElementById('TextInput').placeholder;
            var post = {};
            post.data = text;
            switch (currentSelect) {
                case "KMeans":
                    post.meanCount = document.getElementById("KMeansMeansCount").value;
                    post.meanIter = document.getElementById("KMeansIterCount").value;
                    console.log(post);
                    break;
                case "DBScan":
                    post.radius = document.getElementById("DBScanRadius").value;
                    post.points = document.getElementById("DBScanPoints").value;
                    break;
                case "Optics":
                    post.radius = document.getElementById("OpticsRadius").value;
                    post.points = document.getElementById("OpticsPoints").value;
                    break;
            }
            $.post('/apis/cluster/' + currentSelect, post,
                    function (d) {
                        console.log(d);
                        document.getElementById('JSONOutput').innerHTML = JSON.stringify(d, null, 4);
                        updateGraphic(d);


                    })

        }


