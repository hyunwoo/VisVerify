extends ../../layout
block content
    div.container-fluid
        p
        -if(success != undefined && success == false){
            div.alert.alert-danger
                h4 <strong> 데이터에 오류가 발생했습니다.</strong>
                h5 csv 데이터에 오류가 발생했습니다. 데이터를 확인하세요.

        - }
        h2
            a #
            |  FreeNetwork Prototype
        div(id='chart', style='margin:0;width:100%; height:1400px; border:1px solid')
        legend
        form(action='./circularParellar',method='post')

            div.row
                div.col-sm-8
                    h4
                        a #Data :
                        |  CSV Data
                div.col-sm-4(align='right')
                    button.btn.btn-success(align='right', type='submit') Update

            div.container-fluid
                textarea(name = 'data', id='data',style='width:100%; height:1400px;')

            div.container-fluid
                textarea.hidden(name = 'text', id='text') #{default_data}



        legend
        script.
            var gridsdata = [];
            var datas = [];
            var G_DATA = JSON.parse(document.getElementById("text").value);
            var circle_line_data = [];
            var data_count = 195;
            var category_length = G_DATA['max'].arg1;
            var circle_length = category_length * 2;
            var seem_good_gap = 0.5;
            var outer_stroke_width = 0.5;
            var category_line_height = 180;
            var category_line_abs = category_line_height + seem_good_gap * data_count;
            var gridwidth = 40;
            var default_circle_size = 6;
            var cat_tfidf = [];
            var grid_color = '#dfdfdf';
            var tf_idf_mul_value = 2.0;
            var maxs = [];
            var line_mode = 'linear'; // cardinal  // linear
            var names = [];
            var contents = [];
            var contents_gap = 45;
            var click_status = 'true';
            var clicked = [];
            var defaultdelayTime = 1;

            function removeArray(array, value) {
                for (var i = array.length - 1; i >= 0; i--) {
                    if (array[i] === value) {
                        array.splice(i, 1);
                    }
                }
            }



            var grid_colors = {};
            grid_colors['A'] = '#ffaaaa';
            grid_colors['B'] = '#ccffaa';
            grid_colors['C'] = '#aaaaff';
            grid_colors['D'] = '#ffaaff';

            for (var i = 0; i < category_length; i++) {
                var max_val = G_DATA['max'][i];
                maxs.push(G_DATA['max'][i]);
                cat_tfidf.push(G_DATA['cat'][i]);

                var cur_name = G_DATA['idx_name'][i].split('_');
                names.push(cur_name);
            }

            for (var i = 0; i < category_length; i++) {
                var content = [];
                for (var j = 0; j < maxs[i] + 1; j++) {
                    var e = {
                        size: 0,
                        color: '#ffffff',
                    }
                    content.push(e);
                }
                contents.push(content);

            }

            var myTextArea = document.getElementById("text");
            /*
            var myCodeMirror = CodeMirror(function (elt) {
                        myTextArea.parentNode.replaceChild(elt, myTextArea);
                    },
                    {
                        value: myTextArea.value,
                        lineNumbers: true,
                        lineWrapping: true,
                        theme: '3024-day',
                    }
            )*/

            for (var i = 0; i < circle_length + 1; i++) {
                circle_line_data.push([i, 0])
            }

            var grid_idxs = [];
            for (var idx = 0; idx < data_count; idx++) {
                var value = G_DATA[G_DATA.keys[idx]];
                var grid_idx = [];
                for (var i = 0; i < category_length; i++) {

                    grid_idx.push(contents[i][value[i]].size);
                    contents[i][value[i]].size += 1;
                    if(value[i] == 0) contents[i][value[i]].size = 0;
                }
                grid_idxs.push(grid_idx);
            }


            for (var idx = 0; idx < data_count; idx++) {
                var value = G_DATA[G_DATA.keys[idx]];
                var data = {
                    logo: G_DATA[G_DATA.keys[idx]].name,
                    idx: idx,
                    color: G_DATA[G_DATA.keys[idx]].arg2 == 0 ? '#cccccc' : G_DATA[G_DATA.keys[idx]].arg2,
                    values: [],
                    connect: [],
                    connect_color: '#cccccc',
                    grid_idx: grid_idxs[idx],
                };


                var max_idf_value = 0;
                var mul_idf_value = 0;
                for (var i = 0; i < category_length; i++) {

                    if (value[i] != 0) {
                        if (value.cat == cat_tfidf[i]) {
                            mul_idf_value += tf_idf_mul_value;
                            max_idf_value += tf_idf_mul_value;
                        } else {
                            max_idf_value += 1;
                        }

                    }
                }

                for (var i = 0; i < category_length; i++) {
                    var height = 0;
                    for (var j = 0; j < value[i]; j++) {
                        height += contents[i][j].size * seem_good_gap;
                        height += contents_gap;
                    }

                    if(j == 0)
                        data.values.push([i, height]);
                    else
                        data.values.push([i, height + data.grid_idx[i] * seem_good_gap]);

                    if (value[i] != 0) {
                        var idf = 0.5;
                        if (value.cat == cat_tfidf[i]) {
                            data.connect.push([i, mul_idf_value, cat_tfidf[i], max_idf_value, 'true']);
                        }
                        else
                            data.connect.push([i, idf, cat_tfidf[i], max_idf_value,  'false']);
                    }


                }


                data.name = 'idx : ' + idx;
                data.values.push([category_length, data.values[0][1]]);
                datas.push(data);
            }

            var width = document.getElementById("chart").offsetWidth,
                    height = document.getElementById("chart").offsetHeight;
            var cx = width / 2, cy = height / 2;
            var angle = d3.scale.linear()
                    .domain([0, circle_length])
                    .range([0, Math.PI * 2]);
            var angle_data = d3.scale.linear()
                    .domain([0, category_length])
                    .range([0, Math.PI * 2]);
            var r = 350;
            var h = 200;
            var zoom = d3.behavior.zoom()
                    .scaleExtent([1, 10])
                    .on("zoom", zoomed);

            var drag = d3.behavior.drag()
                    .origin(function (d) {
                        return d;
                    })
                    .on("dragstart", dragstarted)
                    .on("drag", dragged)
                    .on("dragend", dragended);

            var svg = d3.select("#chart").append('svg')
                    .attr("width", width)
                    .attr("height", height)
                    .append("g")
                    .attr("transform", "translate( 0, 0)")
                    .call(zoom);

            var rect = svg.append("rect")
                    .attr("width", width * 3)
                    .attr("height", height * 3)
                    .attr("x", - width)
                    .attr("y", - height)
                    .style("fill", "#eeeeee")
                    .style("pointer-events", "all");





            function zoomed() {
                //console.log("zoomed : " + d3.event.translate);
                svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
            }
            function dragstarted(d) {
                d3.event.sourceEvent.stopPropagation();
                d3.select(this).classed("dragging", true);
            }
            function dragged(d) {
                d3.select(this).attr("cx", d.x = d3.event.x).attr("cy", d.y = d3.event.y);
            }
            function dragended(d) {
                d3.select(this).classed("dragging", false);
            }



            var gridVerticalGen = d3.svg.line()
                    .x(function (d) {
                        var x = Math.sin(angle(d[0])) * (r + category_line_abs * d[1] + d[1] * gridwidth + 25);
                        return cx + x;
                    })
                    .y(function (d) {
                        var y = Math.cos(angle(d[0])) * (r + category_line_abs * d[1] + d[1] * gridwidth + 25 );
                        return cy + y;
                    });

            var gridGen = d3.svg.line()
                    .x(function (d) {
                        var x = Math.sin(angle(d[0])) * (r + category_line_height * d[1]);
                        return cx + x;
                    })
                    .y(function (d) {
                        var y = Math.cos(angle(d[0])) * (r + category_line_height * d[1]);
                        return cy + y;
                    });


            var dataLineGen = d3.svg.line()
                    .x(function (d) {

                        var sin = Math.sin(angle_data(d[0]));
                        var x = sin * (r + d[1] + gridwidth + 10);
                        return cx + x;
                    })
                    .y(function (d) {
                        var cos = Math.cos(angle_data(d[0]));
                        var y = cos * (r + d[1] + gridwidth + 10  );
                        return cy + y;
                    })
                    .interpolate(line_mode);

            var gridLineGen = d3.svg.line()
                    .x(function (d) {
                        var sin = Math.sin(angle(d[0] + d[2] * 0.1));
                        var x = sin * (r + d[1] + gridwidth / 2);
                        return cx + x;
                    })
                    .y(function (d) {
                        var cos = Math.cos(angle(d[0] + d[2] * 0.1));
                        var y = cos * (r + d[1] + gridwidth / 2);
                        return cy + y;
                    });

            /** draw grids **/
            var nodeGen = {};


            for (var i = 0; i < category_length; i++) {
                svg.append('svg:path')
                        .attr('d', gridVerticalGen([[i * circle_length / category_length, 0], [i * circle_length / category_length, 1]]))
                        .attr('stroke', grid_color)
                        .attr('stroke-width', 2.0)
                        .attr('fill', 'none');
            }

            for (var i = 0; i < circle_length; i += 2) {
                svg.append('svg:path')
                        .attr('d', gridLineGen([[i - 1, 0, -1], [i, 0, 0], [i + 1, 0, 1]]))
                        .attr('stroke', grid_colors[cat_tfidf[i / 2]])
                        .attr('stroke-width', gridwidth)
                        .attr('fill', 'none');
            }

            var drawings = [];

            function drawInit(d) {
                drawings.push({d: d});
            }
            function drawPath() {

                for (var i = 0; i < drawings.length; i++) {
                    var d = drawings[i].d;


                    var graph = svg.append('svg:path')
                            .attr('d', dataLineGen(d.values))
                        //.attr('stroke', d.color)
                            .attr('stroke-width', 0)
                            .attr('stroke-opacity', 1)
                            .attr('fill', 'none')
                            .attr('deactive', '#cccccc')
                            .attr('active', d.color)
                            .attr('flag', 'normal')
                            .attr('before_flag', 'normal')
                            .attr('logo', d.logo);
                    drawings[i].graph = graph;
                }

            }
            function drawCircle() {
                for (var i = 0; i < drawings.length; i++) {
                    var d = drawings[i].d;
                    var saved = 0;
                    var x = 0, y = 0;
                    for (var j = 0; j < d.connect.length; j++) {
                        x += Math.sin(angle_data(d.connect[j][0])) * r * d.connect[j][1] ;
                        y += Math.cos(angle_data(d.connect[j][0])) * r * d.connect[j][1] ;
                        saved += d.connect[j][1];
                    }
                    x /= saved;
                    y /= saved;
                    x += cx;
                    y += cy;

                    var circle = svg.append("circle")
                            .attr('cx', x)
                            .attr('cy', y)
                            .attr('r', 0)
                        //.attr('fill', d.color)
                            .attr('deactive', '#cccccc')
                            .attr('active', d.color)
                            .attr('flag', 'normal')
                            .attr('before_flag', 'normal')
                            .attr('logo', d.logo);
                    drawings[i].circle = circle;
                }

            }
            function drawText() {
                for (var i = 0; i < drawings.length; i++) {
                    var d = drawings[i].d;
                    var saved = 0;
                    var x = 0, y = 0;
                    for (var j = 0; j < d.connect.length; j++) {
                        x += Math.sin(angle_data(d.connect[j][0])) * r * d.connect[j][1];
                        y += Math.cos(angle_data(d.connect[j][0])) * r * d.connect[j][1];
                        saved += d.connect[j][1];
                    }
                    x /= saved;
                    y /= saved;
                    x += cx;
                    y += cy;
                    var text = svg.append('text')
                            .text(d.logo)
                            .style("font-family", "Geneva")
                            .style("font-size", "12px")
                            .attr("text-anchor", "middle")
                            .attr("fill", '#eeeeee')
                            .attr('flag', 'normal')
                            .attr('before_flag', 'normal')
                            .attr("transform", "translate(" + x + "," + (y + 20) + ") rotate(0)")
                            .attr('logo', d.logo);
                    drawings[i].text = text;
                }
            }
            function drawConnection(d) {
                for (var i = 0; i < drawings.length; i++) {
                    var d = drawings[i].d;
                    var saved = 0;
                    var x = 0, y = 0;
                    for (var j = 0; j < d.connect.length; j++) {
                        x += Math.sin(angle_data(d.connect[j][0])) * r * d.connect[j][1];
                        y += Math.cos(angle_data(d.connect[j][0])) * r * d.connect[j][1];
                        saved += d.connect[j][1];
                    }

                    x /= saved;
                    y /= saved;
                    x += cx;
                    y += cy;
                    var connections = [];
                    for (var j = 0; j < d.connect.length; j++) {
                        var sin = Math.sin(angle_data(d.connect[j][0]));
                        var cos = Math.cos(angle_data(d.connect[j][0]));
                        var connection = svg.append("line")
                                .style("stroke", '#eeeeee')
                                .style('stroke-width', 0.0)
                                .attr("x1", x)
                                .attr("y1", y)
                                .attr("x2", sin * r + cx)
                                .attr("y2", cos * r + cy)
                                .attr('flag', 'normal')
                                .attr('before_flag', 'normal')
                                .attr('active', grid_colors[d.connect[j][2]])
                                .attr('deactive', '#cccccc')
                                .attr('isCat', d.connect[j][3])
                                .attr('logo', d.logo);
                        connections.push(connection);
                    }
                    drawings[i].connections = connections;
                }
            }



            function setEvents(i, d) {
                var d = d;
                var circle = drawings[i].circle;
                var graph = drawings[i].graph;
                var text = drawings[i].text;
                var connections = drawings[i].connections;

                circle.on('mouseover', function () {
                    setClear('invisible');
                    adjustAll();
                    graph.attr('flag', 'preserve')
                    circle.attr('flag', 'preserve')
                    text.attr('flag', 'preserve');
                    setAll();
                })

                circle.on('mouseout', function () {


                    if (clicked.length == 0) {
                        setClear('normal');
                        setAll();
                    } else {
                        setClear('invisible');
                        graph.attr('flag', 'invisible')
                        circle.attr('flag', 'invisible')
                        text.attr('flag', 'invisible');
                        adjustAll();
                        setAll();
                    }


                })
                function click() {
                    var add = true;
                    for (var i = 0; i < clicked.length; i++) {
                        if (clicked[i] === d.logo) {
                            removeArray(clicked, d.logo);
                            add = false;
                            if (clicked.length == 0) {
                                // good
                                setClear('normal');
                                setAll();
                            }
                            break;
                        }
                    }
                    if (add) {
                        clicked.push(d.logo);
                    }


                    setClear('invisible');
                    adjustAll();
                    setAll();
                }

                circle.on('click', click);

            }


            for (var i = 0, max = datas.length; i < max; i++) {
                drawInit(datas[i]);
            }



            console.log('init end');
            drawPath();
            console.log('path end');
            drawConnection();
            console.log('connection end');
            drawText();
            console.log('drawtext end');
            drawCircle();
            console.log('circle end');



            for (var i = 0, max = datas.length; i < max; i++) {
                setEvents(i, datas[i]);
            }

            var btShowCate = svg.append("rect")
                    .attr('x', 100)
                    .attr('y', height - 200)
                    .attr("width", 150)
                    .attr("height", 60)
                    .style("fill", "#9999aa")
                    .style("pointer-events", "all");
            var btShowYear = svg.append("rect")
                    .attr('x', 100)
                    .attr('y', height - 280)
                    .attr("width", 150)
                    .attr("height", 60)
                    .attr('text', "aa")
                    .attr('text-color', '000000')
                    .style("fill", "#9999aa")
                    .style("pointer-events", "all")
            var btdeSelect = svg.append("rect")
                    .attr('x', 100)
                    .attr('y', height - 500)
                    .attr("width", 150)
                    .attr("height", 60)
                    .style("fill", "#9999aa")
                    .style("pointer-events", "all");
            var btUndo = svg.append("rect")
                    .attr('x', 100)
                    .attr('y', height - 580)
                    .attr("width", 150)
                    .attr("height", 60)
                    .attr('text', "aa")
                    .attr('text-color', '000000')
                    .style("fill", "#9999aa")
                    .style("pointer-events", "all")

            btShowCate.on('mouseover', function () {
                btShowCate.style("fill", "#bbbbdd")
            });
            btShowCate.on('mouseout', function () {
                btShowCate.style("fill", "#9999aa")
            });
            btShowCate.on('click', function () {
                changeMode('cat');
            });
            btShowYear.on('mouseover', function () {
                btShowYear.style("fill", "#bbbbdd")
            });
            btShowYear.on('mouseout', function () {
                btShowYear.style("fill", "#9999aa")
            });
            btShowYear.on('click', function () {
                changeMode('year');
            });

            btdeSelect.on('mouseover', function () {
                btdeSelect.style("fill", "#bbbbdd")
            });
            btdeSelect.on('mouseout', function () {
                btdeSelect.style("fill", "#9999aa")
            });
            btdeSelect.on('click', function () {
                clicked = [];
                setClear('normal');
                setAll();
            });
            btUndo.on('mouseover', function () {
                btUndo.style("fill", "#bbbbdd")
            });
            btUndo.on('mouseout', function () {
                btUndo.style("fill", "#9999aa")
            });
            btUndo.on('click', function () {
                if(clicked.length > 0) {
                    removeArray(clicked, clicked[clicked.length - 1]);
                    if(clicked.length == 0){
                        setClear('normal');
                        setAll();
                    } else {
                        adjustAll();
                        setAll();
                    }
                }
            });
            svg.append('text')
                    .text('Category')
                    .style("font-family", 'Geneva')
                    .style("font-size", "16px")
                    .attr("text-anchor", "middle")
                    .attr("fill", 'black')
                    .attr('flag', 'normal')
                    .attr('before_flag', 'normal')
                    .attr("transform", "translate(" + 175 + "," + (height - 280 + 35) + ") rotate(" + 0 + ")")
            svg.append('text')
                    .text('Year')
                    .style("font-family", 'Geneva')
                    .style("font-size", "16px")
                    .attr("text-anchor", "middle")
                    .attr("fill", 'black')
                    .attr('flag', 'normal')
                    .attr('before_flag', 'normal')
                    .attr("transform", "translate(" + 175 + "," + (height - 200 + 35) + ") rotate(" + 0 + ")")
            svg.append('text')
                    .text('deselect All')
                    .style("font-family", 'Geneva')
                    .style("font-size", "16px")
                    .attr("text-anchor", "middle")
                    .attr("fill", 'black')
                    .attr('flag', 'normal')
                    .attr('before_flag', 'normal')
                    .attr("transform", "translate(" + 175 + "," + (height - 500 + 35) + ") rotate(" + 0 + ")")
            svg.append('text')
                    .text('undo Select')
                    .style("font-family", 'Geneva')
                    .style("font-size", "16px")
                    .attr("text-anchor", "middle")
                    .attr("fill", 'black')
                    .attr('flag', 'normal')
                    .attr('before_flag', 'normal')
                    .attr("transform", "translate(" + 175 + "," + (height - 580 + 35) + ") rotate(" + 0 + ")")
            setAll(40);

            for (var i = 0; i < category_length; i++) {
                // header
                var sin = Math.sin(angle_data(i));
                var x = sin * (r + 25 ) + cx;
                var cos = Math.cos(angle_data(i));
                var y = cos * (r + 25 ) + cy;
                var angle = -i / category_length * 360;

                var mode = 0;
                if (angle < -90) {
                    angle -= 180;
                    mode = 1;
                }
                if (angle < -445) {
                    mode = 0;
                    angle += 180;
                }

                if (mode == 0) convert_height = 0;
                else convert_height = -7;
                if (mode == 1) {
                    y = cos * (r + 25 + convert_height ) + cy;
                    x = sin * (r + 25 + convert_height ) + cx;
                }

                if (names[i][0].indexOf('<br>') != -1) {
                    var strs = names[i][0].split('<br>')
                    for (var j = 0; j < strs.length; j++) {
                        var x = sin * (r + 16 + j * 14 + convert_height ) + cx;
                        var y = cos * (r + 16 + j * 14 + convert_height) + cy;
                        svg.append('text')
                                .text(strs[j])
                                .style("font-family", 'Geneva')
                                .style("font-size", "12px")
                                .attr("text-anchor", "middle")
                                .attr("fill", 'black')
                                .attr('flag', 'normal')
                                .attr('before_flag', 'normal')
                                .attr("transform", "translate(" + x + "," + y + ") rotate(" + angle + ")")
                    }
                } else {
                    svg.append('text')
                            .text(names[i][0])
                            .style("font-family", 'Geneva')
                            .style("font-size", "12px")
                            .attr("text-anchor", "middle")
                            .attr("fill", 'black')
                            .attr('flag', 'normal')
                            .attr('before_flag', 'normal')
                            .attr("transform", "translate(" + x + "," + y + ") rotate(" + angle + ")")
                }

                // content
                var value = G_DATA[G_DATA.keys[idx]];
                var height = 0;

                for (var j = 0, max = maxs[i] + 1; j < max; j++) {


                    if (j != 0) height += contents_gap;
                    else height += 44;

                    var sin = Math.sin(angle_data(i));
                    var cos = Math.cos(angle_data(i));

                    var h = (r + height);
                    var x = sin * h + cx;
                    var y = cos * h + cy;

                    var angle = -i / category_length * 360;

                    h = r + height + 7;
                    var x1 = sin * h + cx;
                    var y1 = cos * h + cy;

                    h = r + height + 7 + contents[i][j].size * seem_good_gap;
                    var x2 = sin * h + cx;
                    var y2 = cos * h + cy;


                    if (angle < -90) angle -= 180;
                    if (angle < -445) angle += 180;

                    height += contents[i][j].size * seem_good_gap;

                    svg.append('text')
                            .text(names[i][j + 1])
                            .style("font-family", "Geneva")
                            .style("font-size", "12px")
                            .attr("text-anchor", "middle")
                            .attr("fill", 'black')
                            .attr('flag', 'normal')
                            .attr('before_flag', 'normal')
                            .attr("transform", "translate(" + x + "," + y + ") rotate(" + angle + ")")

                    svg.append("line")
                            .style("stroke", '#666666')
                            .style('stroke-width', 8.1)
                            .style("stroke-opacity", 0.35)
                            .attr("x1", x1)
                            .attr("y1", y1)
                            .attr("x2", x2)
                            .attr("y2", y2)


                }
            }


            function selectCircle() {

            }

            function deselectCircle() {

            }
            function setClear(state) {
                for (var j = 0; j < drawings.length; j++) {
                    var graph = drawings[j].graph;
                    var circle = drawings[j].circle;
                    var text = drawings[j].text;
                    graph.attr('flag', state);
                    circle.attr('flag', state);
                    text.attr('flag', state);
                }
            }

            function adjustAll() {
                for (var j = 0; j < drawings.length; j++) {
                    var graph = drawings[j].graph;
                    var circle = drawings[j].circle;
                    var text = drawings[j].text;

                    var ex = false;
                    for (var i = 0; i < clicked.length; i++) {
                        if (graph.attr('logo') === clicked[i]) {
                            ex = true;
                            break;
                        }

                    }
                    if (ex) {
                        graph.attr('flag', 'select');
                        circle.attr('flag', 'select');
                        text.attr('flag', 'select');
                    } else {
                        graph.attr('flag', 'invisible');
                        circle.attr('flag', 'invisible');
                        text.attr('flag', 'invisible');
                    }
                }
            }
            function setAll(delayTime) {
                if (delayTime == undefined) delayTime = defaultdelayTime;
                for (var j = 0; j < drawings.length; j++) {
                    var graph = drawings[j].graph;
                    var circle = drawings[j].circle;
                    var text = drawings[j].text;
                    var connections = drawings[j].connections;

                    var status = 'select';
                    if (graph.attr('flag') == status) {
                        graph.transition().attr('stroke', graph.attr('active'))
                                .attr('stroke-width', 2.0)
                    }

                    if (circle.attr('flag') == status) {
                        circle.transition().attr('fill', circle.attr('active'))
                                .attr('r', 10);
                    }

                    if (text.attr('flag') == status) {
                        text.transition()
                                .attr("fill", '#555555')
                    }

                    status = 'invisible';
                    if (graph.attr('flag') == status) {
                        graph.transition().attr('stroke', graph.attr('deactive'))
                                .attr('stroke-width', 0.05)
                    }

                    if (circle.attr('flag') == status) {
                        circle.transition().attr('fill', circle.attr('active'))
                                .attr('r', 6);
                        for (var i = 0; i < connections.length; i++) {
                            connections[i].transition().delay(j * delayTime)
                                    .style('stroke-width', 0.0)
                                    .style('stroke', connections[i].attr('deactive'))
                        }
                    }

                    if (text.attr('flag') == status) {
                        text.transition()
                                .attr("fill", '#dddddd')
                    }

                    status = 'normal';
                    if (graph.attr('flag') == status) {
                        graph.transition().delay(j * delayTime)
                                .attr('stroke', graph.attr('active'))
                                .attr('stroke-width', outer_stroke_width)
                        for (var i = 0; i < connections.length; i++) {
                            connections[i].transition().delay(j * delayTime)
                                    .style('stroke-width', 0.1)
                                    .style('stroke', connections[i].attr('deactive'))
                        }
                    }

                    if (circle.attr('flag') == status) {
                        circle.transition().delay(j * delayTime)
                                .attr('fill', circle.attr('active'))
                                .attr('r', default_circle_size);
                    }

                    if (text.attr('flag') == status) {
                        text.transition()
                                .delay(j * delayTime)
                                .attr("fill", '#666666')
                    }

                    status = 'preserve';
                    if (graph.attr('flag') == status) {
                        graph.transition()
                                .delay(j * delayTime)
                                .attr('stroke', graph.attr('active'))
                                .attr('stroke-width', outer_stroke_width)
                    }

                    if (circle.attr('flag') == status) {
                        circle.transition().delay(j * delayTime)
                                .attr('fill', circle.attr('active'))
                                .attr('r', default_circle_size);

                        for (var i = 0; i < connections.length; i++) {
                            if (connections[i].attr('isCat') == 'true')
                                connections[i].transition().delay(j * delayTime)
                                        .style('stroke-width', 3)
                                        .style('stroke', connections[i].attr('active'))
                            else
                                connections[i].transition().delay(j * delayTime)
                                        .style('stroke-width', 1)
                                        .style('stroke', connections[i].attr('active'))
                        }
                    }

                    if (text.attr('flag') == status) {
                        text.transition().delay(j * delayTime)
                                .attr("fill", '#333333')
                    }

                }

            }

            function changeMode(mode) {
                for (var i = 0, max = datas.length; i < max; i++) {
                    var circle = drawings[i].circle;
                    var graph = drawings[i].graph;


                    var c = '#cccccc';

                    if (mode === 'cat') {
                        c = G_DATA[G_DATA.keys[i]].arg2 == 0 ? '#cccccc' : G_DATA[G_DATA.keys[i]].arg2;
                        circle.attr('active',c)
                        graph.attr('active',c)
                    } else if (mode === 'year') {
                        c = G_DATA[G_DATA.keys[i]].arg1 == 0 ? '#cccccc' : G_DATA[G_DATA.keys[i]].arg1;
                        circle.attr('active',c)
                        graph.attr('active',c)
                    }
                }
                setAll(5);
            }
            console.log('end');







