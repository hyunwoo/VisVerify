//
   Created by hyunwoo on 2015-04-27.
extends ../../projects_layout
block body
    //script(src='http://d3js.org/d3.v3.min.js')
    style.
        rect.background {
            fill: #fafafa;
        }

        .axis {
            shape-rendering: crispEdges;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
        }

    div.container-fluid
        div
            h2(style='margin-top:0px')
                a #
                |  King's Tendency 02
        legend
        div.dropdown(align='right')
            div.btn.btn-primary.dropdown-toggle(type='button',id='dropdowncountry',data-toggle='dropdown',aria-expanded=true ,style='width:100%;padding-right:3px', align='right')
                div.row
                    div.col-xs-8(align='left')
                        span.badge(style='margin-left:10px') #{count}
                        strong(style='margin-right:10px;padding-left:15px') #{select}
                    div.col-xs-4(align='right')
                        span.caret(style='margin-left:10px;margin-right:10px')
            ul.dropdown-menu(role='menu', aria-labelledby='dropdowncountry',style='width:100%')
                li.dropdown-header Kings
                -for(var i = 0 ; i < kings.length ; i ++){
                li(role='presentation')
                    a(role='menuitem', tabindex='-1', href='eachkingStackGraph?king=' + kings[i].name)
                        div.row(style='margin-top:15px')
                            div.col-sm-7
                                p(style='margin-left:35px') #{kings[i].name}
                            div.col-sm-5(align='right')
                                span.badge(style='width:50px') #{kings[i].value}
                -}
        legend
        svg(id='chart', style=' height:500px; border:1px solid; position:relaytive;')
        legend
        h4
            a #Data :
            |  JSON Data
    div.container-fluid
        textarea(id='text',style='resize:none; width:100%; height:500px; border:1px solid', align='center') #{default_data}
        legend
        div(align='right')
            a # Update
    script.
        var G_DATA = document.getElementById("text").value;
        G_DATA = JSON.parse(G_DATA)
        var myTextArea = document.getElementById("text");
        var myCodeMirror = CodeMirror(function (elt) {
                    console.log(elt);
                    myTextArea.parentNode.replaceChild(elt, myTextArea);
                },
                {
                    value: myTextArea.value,
                    lineNumbers: true,
                    lineWrapping: true,
                    theme: '3024-day',
                }
        );

        var margin = {top: 30, right: 200, bottom: 0, left: 90},
                width = 960 - margin.left - margin.right,
                height = 500 - margin.top - margin.bottom;
        var x = d3.scale.linear()
                .range([0, width]);
        var barHeight = 20;
        var color = d3.scale.category20();
        var duration = 750,
                delay = 25;
        var partition = d3.layout.partition()
                .value(function (d) {
                    return d.size;
                });
        var xAxis = d3.svg.axis()
                .scale(x)
                .orient("top");
        var svg = d3.select("#chart").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        svg.append("rect")
                .attr("class", "background")
                .attr("width", width)
                .attr("height", height)
                .on("click", up);
        svg.append("g")
                .attr("class", "x axis");
        svg.append("g")
                .attr("class", "y axis")
                .append("line")
                .attr("y1", "100%");
        G_DATA
        d3.json("/projects/joseondynasty/data/dummy02.json", function (error, root) {
            partition.nodes(G_DATA);
            x.domain([0, G_DATA.value]).nice();
            down(G_DATA, 0);
        });
        function down(d, i) {
            if (!d.children || this.__transition__) return;
            var end = duration + d.children.length * delay;
            // Mark any currently-displayed bars as exiting.
            var exit = svg.selectAll(".enter")
                    .attr("class", "exit");
            // Entering nodes immediately obscure the clicked-on bar, so hide it.
            exit.selectAll("rect").filter(function (p) {
                return p === d;
            })
                    .style("fill-opacity", 1e-6);
            // Enter the new bars for the clicked-on data.
            // Per above, entering bars are immediately visible.
            var enter = bar(d)
                    .attr("transform", stack(i))
                    .style("opacity", 1);
            // Have the text fade-in, even though the bars are visible.
            // Color the bars as parents; they will fade to children if appropriate.
            enter.select("text").style("fill-opacity", 1e-6);
            enter.select("rect").style("fill", getColor(d));
            // Update the x-scale domain.
            x.domain([0, d3.max(d.children, function (d) {
                return d.value;
            })]).nice();
            // Update the x-axis.
            svg.selectAll(".x.axis").transition()
                    .duration(duration)
                    .call(xAxis);
            // Transition entering bars to their new position.
            var enterTransition = enter.transition()
                    .duration(duration)
                    .delay(function (d, i) {
                        return i * delay;
                    })
                    .attr("transform", function (d, i) {
                        return "translate(0," + barHeight * i * 1.2 + ")";
                    });
            // Transition entering text.
            enterTransition.select("text")
                    .style("fill-opacity", 1);
            // Transition entering rects to the new x-scale.
            enterTransition.select("rect")
                    .attr("width", function (d) {
                        return x(d.value);
                    })
                    .style("fill", function (d) {
                        return getColor(d);
                    });
            // Transition exiting bars to fade out.
            var exitTransition = exit.transition()
                    .duration(duration)
                    .style("opacity", 1e-6)
                    .remove();
            // Transition exiting bars to the new x-scale.
            exitTransition.selectAll("rect")
                    .attr("width", function (d) {
                        return x(d.value);
                    });
            // Rebind the current node to the background.
            svg.select(".background")
                    .datum(d)
                    .transition()
                    .duration(end);
            d.index = i;
        }
        function getColor(d){
            if (d.children == null)
                return color(!!d.children);
            else return color(d.index);
        }
        function up(d) {
            if (!d.parent || this.__transition__) return;
            var end = duration + d.children.length * delay;
            // Mark any currently-displayed bars as exiting.
            var exit = svg.selectAll(".enter")
                    .attr("class", "exit");
            // Enter the new bars for the clicked-on data's parent.
            var enter = bar(d.parent)
                    .attr("transform", function (d, i) {
                        return "translate(0," + barHeight * i * 1.2 + ")";
                    })
                    .style("opacity", 1e-6);
            // Color the bars as appropriate.
            // Exiting nodes will obscure the parent bar, so hide it.
            enter.select("rect")
                    .style("fill", function (d) {
                        return getColor(d);
                    })
                    .filter(function (p) {
                        return p === d;
                    })
                    .style("fill-opacity", 1e-6);
            // Update the x-scale domain.
            x.domain([0, d3.max(d.parent.children, function (d) {
                return d.value;
            })]).nice();
            // Update the x-axis.
            svg.selectAll(".x.axis").transition()
                    .duration(duration)
                    .call(xAxis);
            // Transition entering bars to fade in over the full duration.
            var enterTransition = enter.transition()
                    .duration(end)
                    .style("opacity", 1);
            // Transition entering rects to the new x-scale.
            // When the entering parent rect is done, make it visible!
            enterTransition.select("rect")
                    .attr("width", function (d) {
                        return x(d.value);
                    })
                    .each("end", function (p) {
                        if (p === d) d3.select(this).style("fill-opacity", null);
                    });
            // Transition exiting bars to the parent's position.
            var exitTransition = exit.selectAll("g").transition()
                    .duration(duration)
                    .delay(function (d, i) {
                        return i * delay;
                    })
                    .attr("transform", stack(d.index));
            // Transition exiting text to fade out.
            exitTransition.select("text")
                    .style("fill-opacity", 1e-6);
            // Transition exiting rects to the new scale and fade to parent color.
            exitTransition.select("rect")
                    .attr("width", function (d) {
                        return x(d.value);
                    })
                    .style("fill", getColor(d));
            // Remove exiting nodes when the last child has finished transitioning.
            exit.transition()
                    .duration(end)
                    .remove();
            // Rebind the current parent to the background.
            svg.select(".background")
                    .datum(d.parent)
                    .transition()
                    .duration(end);
        }
        // Creates a set of bars for the given data node, at the specified index.
        function bar(d) {
            var bar = svg.insert("g", ".y.axis")
                    .attr("class", "enter")
                    .attr("transform", "translate(0,5)")
                    .selectAll("g")
                    .data(d.children)
                    .enter().append("g")
                    .style("cursor", function (d) {
                        return !d.children ? null : "pointer";
                    })
                    .on("click", down);
            bar.append("text")
                    .attr("x", -6)
                    .attr("y", barHeight / 2)
                    .attr("dy", ".35em")
                    .style("text-anchor", "end")
                    .text(function (d) {
                        return d.name;
                    });
            bar.append("rect")
                    .attr("width", function (d) {
                        return x(d.value);
                    })
                    .attr("height", barHeight);
            return bar;
        }
        // A stateful closure for stacking bars horizontally.
        function stack(i) {
            var x0 = 0;
            return function (d) {
                var tx = "translate(" + x0 + "," + barHeight * i * 1.2 + ")";
                x0 += x(d.value);
                return tx;
            };
        }
