//
   Created by hyunwoo on 2015-06-23.

extends ../layout
block content
    div.container-fluid
        h2 Network Example

        div(id='canvas', style='width:100%; height:1000px; border:1px solid')
        p
        legend
        div.row
            div.col-sm-1(align='center')
                div.label.label-default
            div.col-sm-1(align='center')
                div.label.label-default col 1
            div.col-sm-1(align='center')
                div.label.label-default col 2
            div.col-sm-1(align='center')
                div.label.label-default col 3
            div.col-sm-1(align='center')
                div.label.label-default col 4
            div.col-sm-1(align='center')
                div.label.label-default col 5
            div.col-sm-1(align='center')
                div.label.label-default Color
        p
        - for (var i = 0 ; i < 5; i ++) {
        div.row
            div.col-sm-1(align='right')
                div.label.label-default row #{i + 1}


            div.col-sm-1
                input(type="number", id="0_" + i , value =Math.floor(Math.random() * 10) + 1, onchange='draw()')
            div.col-sm-1
                input(type="number", id="1_" + i, value =Math.floor(Math.random() * 10) + 1, onchange='draw()')
            div.col-sm-1
                input(type="number", id="2_" + i, value =Math.floor(Math.random() * 10) + 1, onchange='draw()')
            div.col-sm-1
                input(type="number", id="3_" + i, value =Math.floor(Math.random() * 10) + 1, onchange='draw()')
            div.col-sm-1
                input(type="number", id="4_" + i, value =Math.floor(Math.random() * 10) + 1, onchange='draw()')
            div.col-sm-1
                - var c ;
                - if(i == 0) c = 'DDAACC'
                - else if(i == 1) c = 'AACCAA'
                - else if(i == 2) c = 'DD8899'
                - else if(i == 3) c = 'BBAA88'
                - else if(i == 4) c = '88AACC'

                input(type="text", id="6_" + i, value = c, onchange='draw()')
        p
        - }


        script.
            function draw(){

                d3.select("svg")
                        .remove()
                var matrix = [];
                for(var i = 0 ; i < 5 ; i ++){
                    var arr = [];
                    for(var j = 0 ; j < 5 ; j ++){
                        var val = document.getElementById(j + "_" + i).value * 1;
                        console.log(val);
                        arr.push(val);
                    }
                    matrix.push(arr);

                }
                console.log(document.getElementById("6_0"));

                var chord = d3.layout.chord()
                        .padding(.05)
                        .sortSubgroups(d3.descending)
                        .matrix(matrix);
                var width = document.getElementById("canvas").offsetWidth,
                        height = 1000,
                        innerRadius = Math.min(width, height) * .41,
                        outerRadius = innerRadius * 1.1;
                var fill = d3.scale.ordinal()
                        .domain(d3.range(4))
                        .range(["#" + document.getElementById("6_0").value,
                            "#" + document.getElementById("6_1").value,
                            "#" + document.getElementById("6_2").value,
                            "#" + document.getElementById("6_3").value,
                            "#" + document.getElementById("6_4").value]);
                var svg = d3.select("#canvas").append("svg")
                        .attr("width", width)
                        .attr("height", height)
                        .append("g")
                        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
                svg.append("g").selectAll("path")
                        .data(chord.groups)
                        .enter().append("path")
                        .style("fill", function (d) {
                            return fill(d.index);
                        })
                        .style("stroke", function (d) {
                            return fill(d.index);
                        })
                        .attr("d", d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius))
                        .on("mouseover", fade(.1))
                        .on("mouseout", fade(.5));
                var ticks = svg.append("g").selectAll("g")
                        .data(chord.groups)
                        .enter().append("g").selectAll("g")
                        .data(groupTicks)
                        .enter().append("g")
                        .attr("transform", function (d) {
                            return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
                                    + "translate(" + outerRadius + ",0)";
                        });
                ticks.append("line")
                        .attr("x1", 1)
                        .attr("y1", 0)
                        .attr("x2", 5)
                        .attr("y2", 0)
                        .style("stroke", "#000");
                ticks.append("text")
                        .attr("x", 8)
                        .attr("dy", ".35em")
                        .attr("transform", function (d) {
                            return d.angle > Math.PI ? "rotate(180)translate(-16)" : null;
                        })
                        .style("text-anchor", function (d) {
                            return d.angle > Math.PI ? "end" : null;
                        })
                        .text(function (d) {
                            return d.label;
                        });
                svg.append("g")
                        .attr("class", "chord")
                        .selectAll("path")
                        .data(chord.chords)
                        .enter().append("path")
                        .attr("d", d3.svg.chord().radius(innerRadius))
                        .style("fill", function (d) {
                            return fill(d.target.index);
                        })
                        .style("opacity", 0.5);
                // Returns an array of tick angles and labels, given a group.
                function groupTicks(d) {
                    var k = (d.endAngle - d.startAngle) / d.value;
                    return d3.range(0, d.value, 1000).map(function (v, i) {
                        return {
                            angle: v * k + d.startAngle,
                            label: i % 5 ? null : v + "k"
                        };
                    });
                }

                // Returns an event handler for fading a given chord group.
                function fade(opacity) {
                    return function (g, i) {
                        svg.selectAll(".chord path")
                                .filter(function (d) {
                                    return d.source.index != i && d.target.index != i;
                                })
                                .transition()
                                .style("opacity", opacity);
                    };
                }
            }
            window.onload=function () {
                draw();
            }
