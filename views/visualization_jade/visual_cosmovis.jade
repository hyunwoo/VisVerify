//
   Created by hyunwoo on 7/22/15.

extends ../layout
block content
    script(src='/javascripts/cosmovis/movisconnection.js')
    div.container-fluid
        h2
            a #2
            |  StreamGraph Example
        svg(id='chart', style='width:100%; border:1px solid')

        style.
            circle {
                stroke: gray;
                fill: transparent;
            }

            circle.node {
                stroke: gray;
                fill: black;

            }

            circle.outer {
                stroke: gray;
                fill: transparent;
            }

            circle.outer_grid {
                stroke: lightgray;
                fill: transparent;
            }

            line {
                stroke : black;
            }


        script.



            var width = document.getElementById("chart").offsetWidth;
            var height = document.getElementById("chart").offsetHeight;
            var svg = d3.select('#chart').append('svg')

            var ratio = width / 1200;
            document.getElementById("chart").style.height = (800 * ratio) + 'px';
            var absCutValue = 200;
            var pow_val = 1;
            var absCutPercent = 10;
            var hookCutValue = 0.95;
            var anchors = [];
            var nodes = [];

            function drawAnchor() {
                semanticWords.forEach(function (e) {
                    var anchor = {
                        name: e[0],
                        x: e[1] * ratio,
                        y: e[2] * ratio,
                    }
                    anchors.push(anchor)
                    /*
                    svg.append("circle").attr({
                        cx: anchor.x,
                        cy: anchor.y,
                        r: 10,
                    })*/
                    svg.append('text').attr({
                        x : anchor.x,
                        y : anchor.y,
                        "text-anchor" : 'middle',
                        
                    }).text(e[0])
                })
            }



            function updateNodes(){


            }
            function makeNode() {
                var d_count = movieBySemantic.length;
                /** calc Total Value */

                for (var i = 0; i < d_count; i++) {
                    var total = 0;
                    var abs_total = 0;
                    var maxIdx = 0;
                    var maxValue = 0;
                    for (var j = 1; j < movieBySemantic[i].length; j++) {
                        //if(movieBySemantic[i][j] < absCutValue) continue;
                        var val = Math.pow(movieBySemantic[i][j] ,pow_val);
                        abs_total = abs_total * 1+ val * 1;
                    }

                    for (var j = 1; j < movieBySemantic[i].length; j++) {
                        //if(movieBySemantic[i][j] < absCutValue) continue;
                        var val = Math.pow(movieBySemantic[i][j] ,pow_val);
                        if(val < abs_total * absCutPercent * 0.01) continue;
                        total = total * 1 + val * 1;

                    }

                    var convert = 2;
                    if (total < maxValue * 5) convert = 0;
                    else convert = 0;
                    //total += maxValue * convert;
                    /** calc Node Position */
                    var x = 0, y = 0;
                    for (var j = 1; j < movieBySemantic[i].length; j++) {
                        var val = Math.pow(movieBySemantic[i][j] ,pow_val);
                        if(val < abs_total * absCutPercent * 0.01) continue;
                        var power = val / total;
                        x += anchors[j - 1].x * power;
                        y += anchors[j - 1].y * power;
                    }


                    nodes.push({
                        name: movieBySemantic[i][0],
                        x: x,
                        y: y,
                        anchor: maxIdx,
                        idx : i,
                    });

                }
                //console.log(total);
            }

            function getDirectionAndDist(x1, y1, x2, y2) {
                var dx = x1 - x2;
                var dy = y1 - y2;
                var dist = Math.sqrt(dx * dx + dy * dy);

                dx /= dist;
                dy /= dist;
                var success = true;
                if(dist == 0) success = false;

                return {
                    dx: dx,
                    dy: dy,
                    dist: dist,
                    success :success,
                }
            }

            function flok() {
                for (var c = 0; c < 100; c++) {
                    for (var i = 0; i < nodes.length; i++) {
                        for (var j = i + 1; j < nodes.length; j++) {
                            if (i == j) continue;
                            var geo = getDirectionAndDist(nodes[i].x, nodes[i].y,
                                    nodes[j].x, nodes[j].y)

                            var std = 10 * ratio;
                            if (geo.dist < std) {
                                nodes[j].x -= geo.dx * (std - geo.dist) / 2;
                                nodes[j].y -= geo.dy * (std - geo.dist) / 2;
                                nodes[i].x += geo.dx * (std - geo.dist) / 2;
                                nodes[i].y += geo.dy * (std - geo.dist) / 2;
                            }
                        }
                    }
                }
            }

            function tension() {
                for (var i = 0; i < nodes.length; i++) {
                    for (var j = i + 1; j < nodes.length; j++) {
                        if (i == j) continue;
                        if(movieMatrix[i][j + 1] == null) continue;
                        try {
                            var geo = getDirectionAndDist(nodes[i].x, nodes[i].y,
                                    nodes[j].x, nodes[j].y)
                            var hookvalue = movieMatrix[i][j + 1];

                            if(!geo.success) continue;

                            if(hookvalue < 0.95){
                                continue;
                            }
                            var v1, v2;

                            var tensionValue = 0.01    ;
                            nodes[j].x += geo.dx * geo.dist * hookvalue * tensionValue;
                            nodes[j].y += geo.dy * geo.dist * hookvalue * tensionValue;
                            nodes[i].x -= geo.dx * geo.dist * hookvalue * tensionValue;
                            nodes[i].y -= geo.dy * geo.dist * hookvalue * tensionValue;
                        } catch(e){
                            console.log(e);
                        }

                    }
                }

            }

            function drawLine(){

                var drawCount = 0;
                for(var i = 0 ; i < movieMatrix.length ; i ++){
                    console.log(movieMatrix[i].length);
                }
                console.log(nodes.length + " , " + movieMatrix.length + " , " +movieMatrix[1].length)
                console.log(drawCount);
            }

            function drawNode() {
                nodes.forEach(function (e) {
                    var r = 1;
                    if(e.name === 'StarTrek'){
                        console.log("hi");
                        r = 5;
                    } else {

                    }
                    circle = svg.append('circle').attr({
                        cx: e.x,
                        cy: e.y,
                        class :'node',
                        r: r,

                    })
                    circle.on('mouseover', function(){
                        var idx = circle.attr('idx')

                        console.log('idx : ' + e.idx +    '  name : ' + nodes[e.idx].name)
                    })
                })
            }

            drawAnchor();
            makeNode();
            //drawLine();
            for(var i = 0 ; i < 1 ; i ++) {
                tension();
                flok();
            }

            drawNode();
            //console.log(movieMatrix);

