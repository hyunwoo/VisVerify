//
   Created by hyunwoo on 7/22/15.
extends ../layout
block content
    script(src='/javascripts/cosmovis/cosmovis_data.js')
    script(src='/javascripts/cosmovis/hitmap.js')
    div.container-fluid(style='margin:0px; padding:0px')

        #myModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel')
            .modal-dialog(role='document')
                .modal-content
                    .modal-header
                        h3#modalLabel.modal-title(align='center') Loading Cosmovis
                    .modal-body
                        div.progress
                            div#progress.progress-bar.progress-bar-striped.active(role='progressbar', aria-valuenow="40", aria-valuemin="0"
                            ,aria-valuemax="100" ,style="width:0%") 0% Complete (success)
                    .modal-footer
                        h5#modelContents(align='center') asdfasdf
        svg(id='chart', style='width:100%; border:1px solid' )
        style.
            circle {

            }

            circle.node {
                z-index: 0;

            }

            circle.outer {
                stroke: gray;
                fill: transparent;
            }

            circle.outer_grid {
                stroke: lightgray;
                fill: transparent;
            }



            line {

            }
        script.
            var inverse = !true;

            function switchText() {

            }

            function switchHitmap() {


            }

            function switchBackgroundImage() {

            }

            function showModal() {
                $("#myModal").modal({
                    backdrop: 'static',
                    keyboard: false
                })
            }

            function hideModal() {
                $('#myModal').modal('hide');
            }

            function setModalText(text) {
                $("#modelContents").text(text);
            }

            function progressChange(value) {
                value = Math.floor(value * 100) / 100;
                $('.progress-bar').css('width', value + '%').attr('aria-valuenow', value).text(value + ' %');
            }


            function button(svg, x, y, w, h, str) {
                var rect = svg.append("rect")
                        .attr("width", w)
                        .attr("height", h)
                        .attr("x", x).attr("y", y)
                        .attr('class', 'button_default')
                        .attr('fill', 'lightgray')
                        .style("pointer-events", "all");
                svg.append('text').text(str)
                        .attr("x", x + w / 2)
                        .attr("y", y + h / 2 + 5)
                        .style("font-family", "Trebuchet MS , Helvetica, sans-serif")
                        .style("font-size", "13px")
                        .style("font-weight", 'bold')
                        .attr("text-anchor", "middle")
                        .attr("fill", '#3f3f3f')
                rect.on('mouseover', function () {
                    rect.transition().attr('fill', 'darkgray');
                })

                rect.on('mouseout', function () {
                    rect.transition().attr('fill', 'lightgray');
                })
                return rect;

            }


            var svg = d3.select('#chart').append('svg');
            var width = document.getElementById('chart').offsetWidth;
            var ratio = width / 1200;
            document.getElementById("chart").style.height = (800 * ratio) + 'px';


            var isfirst = true;
            function reset() {
                console.log(movieBySemantic.length);
                var svg = d3.select('#chart').append('svg');
                var width = document.getElementById('chart').offsetWidth;


                var layer_bg = svg.append('g');
                if (inverse)
                    layer_bg.append("rect")
                            .attr("width", "100%")
                            .attr("height", "100%")
                            .attr("fill", "black");
                else
                    layer_bg.append("rect")
                            .attr("width", "100%")
                            .attr("height", "100%")
                            .attr("fill", "white");
                var layer_image = svg.append('g');
                var layer_edge = svg.append('g');
                var layer_node = svg.append('g');
                var layer_text = svg.append('g');
                var layer_popup = svg.append('g');



                var imgStatus = true;
                var anchorStatus = true;
                var hitmapStatus = true;


                var popup = layer_popup.append('rect').attr({
                    x: 0,
                    y: 0,
                    rx : 2,
                    ry : 2,
                    width: 600,
                    height: 308,
                    class : 'popup',
                    fill:'#f5f5f5',
                    stroke:'darkgray',
                    'stroke-weight':'2px',
                })

                layer_popup.style("pointer-events", "none");
                var img_movie = layer_popup.append('image')
                        .attr("x", 15)
                        .attr("y", 50)
                        .attr("fill", '#000000')
                        .attr("xlink:href", "/visualization/cosmovis/poster/images/movieposter_01" + ".gif")
                        .attr("width", 164 + 'px')
                        .attr("height", 238 + 'px')


                var text_movieTitle = layer_popup.append('text').attr({
                    x: 15,
                    y: 28,
                    'text-anchor': 'left',
                }).style({
                    "font-family": "Trebuchet MS , Helvetica, sans-serif",
                    "font-size": 20 + "px",
                    "fill": "black",
                }).text('Star Trek')

                var text_movieBody = layer_popup.append('text').attr({
                    x: 15,
                    y: 42,
                    'text-anchor': 'left',
                }).style({
                    "font-family": "Trebuchet MS , Helvetica, sans-serif",
                    "font-size": 12 + "px",
                    "fill": "black",
                }).text('description for ' + 'Star Trek');


                initHeatmap(layer_popup, 190, 50, 390, 240);

                layer_popup.attr('opacity',0);


                function FormatNumberLength(num, length) {
                    var r = "" + num;
                    while (r.length < length) {
                        r = "0" + r;
                    }
                    return r;
                }


                function showHeatmap(x,y, idx){
                    var deliver = [];
                    for(var i = 1 ; i < movieBySemantic[idx].length - 1 ; i ++)
                        deliver.push(movieBySemantic[idx][i]);

                    var didx = 0;
                    if(idx < 100){
                        didx = FormatNumberLength(idx,2);
                    } else didx = FormatNumberLength(idx,3);
                    console.log("show : " + didx + " , " + movieBySemantic[idx][0]);

                    img_movie.attr("xlink:href", "/visualization/cosmovis/poster/images/movieposter_" + didx + ".gif")
                    drawHeatmap(deliver);
                    layer_popup.transition().delay(500).attr('opacity', 1);
                    text_movieTitle.text(movieBySemantic[idx][0]);
                    text_movieBody.text('description for ' + movieBySemantic[idx][0]);

                    if(x > width / 2)
                        layer_popup.attr('transform','translate(' + (x - 650) + ', ' + (y - 100)  + ')');
                    else
                        layer_popup.attr('transform','translate(' + (x + 50) + ', ' + (y - 100) + ')');

                }
                function hideHeatMap(){
                    clearHeatmap();
                    layer_popup.transition().attr('opacity', 0);
                }







                button(svg, 10, 10, 90, 30, 'Image').on('click', function () {
                    if (imgStatus)
                        layer_image.transition().duration(1300).attr('opacity', 0);
                    else
                        layer_image.transition().duration(1300).attr('opacity', 1);

                    imgStatus = !imgStatus;
                });
                button(svg, 110, 10, 90, 30, 'Hitmap');
                button(svg, 210, 10, 90, 30, 'Text').on('click', function () {
                    if (anchorStatus)
                        layer_text.transition().duration(1300).attr('opacity', 0);
                    else
                        layer_text.transition().duration(1300).attr('opacity', 1);

                    anchorStatus = !anchorStatus;
                });
                button(svg, 10, 60, 90, 30, 'Inverse').on('click', function () {
                    inverse = !inverse;
                    svg.remove();
                    //svg.selectAll('g').remove();
                    reset();
                });


                layer_image.attr('opacity', 0);
                layer_text.attr('opacity', 0);
                layer_image.transition().duration(2000).delay(4000).attr('opacity', 1);
                layer_text.transition().duration(2000).delay(2000).attr('opacity', 1);
                if (width == undefined) width = 1600;
                var ratio = width / 1200;
                var scale_ratio = width / 2560;
                document.getElementById("chart").style.height = (800 * ratio) + 'px';
                var height = 800 * ratio;
                var nodes = [];
                var edges = [];
                var clusterArr = [];

                for (var i = 0; i < movieBySemantic.length; i++) {
                    clusterArr[i] = movieBySemantic[i][37];
                }
                if (isfirst) {
                    for (var i = 0; i < semanticWords.length; i++) {
                        semanticWords[i][1] = semanticWords[i][1] * (width / 1200);
                        semanticWords[i][2] = semanticWords[i][2] * (height / 800);
                    }
                    isfirst = !isfirst;
                }

                function drawAnchor() {
                    semanticWords.forEach(function (e) {
                        layer_text.append('text').attr({
                            x: e[1],
                            y: e[2],
                            'text-anchor': 'middle',
                        }).style({
                            "font-family": "Trebuchet MS , Helvetica, sans-serif",
                            "font-size": 20 * scale_ratio + "px",
                            "fill": inverse == true ? "#dfdfdf" : "black",
                        }).text(e[0])
                    });

                }


                function hex2a(hexx) {
                    var hex = hexx.toString();//force conversion
                    var str = '';
                    for (var i = 0; i < hex.length; i += 2)
                        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
                    return str;
                }

                function addNodeEvent(data) {
                    data.circle.on('mouseover', function () {
                        data.circle.transition().duration(500).attr({
                                    'r': 15 * scale_ratio,
                                    'stroke-width': '0px',
                                }
                        );
                        console.log(data.idx);
                        showHeatmap(data.posX,data.posY, data.idx);
                    })
                    data.circle.on('mouseout', function () {
                        data.circle.transition().duration(500).attr({
                                    'r': data.r * scale_ratio,
                                    'stroke-width': 7 * scale_ratio + 'px',
                                }
                        );
                        hideHeatMap();
                    })

                    data.circle.on('click', function(){
                        var idx = data.circle.attr('idx');

                        //updateHeatmap(idx);
                    })

                }

                function OnPopup(idx){

                }
                function OffPopup(){

                }

                function initNodes() {
                    var ii = 0;
                    for (var i = 0; i < movieBySemantic.length; i++) {
                        var thisMovie = movieBySemantic[i];
                        ii = i / 4;
                        //빈도가 높은 감정어 찾기
                        var numOfBest = 2;
                        var bestwords = [];
                        for (var r = 0; r < numOfBest; r++) {
                            var max = 0;
                            var maxIdx = 0;
                            for (var s = 0; s < semanticWords.length; s++) {
                                if (thisMovie[s + 1] > max) {
                                    max = thisMovie[s + 1];
                                    maxIdx = s;
                                }
                            }
                            thisMovie[maxIdx + 1] = 0;
                            bestwords.push(maxIdx);
                        }

                        var data = {
                            name: thisMovie[0],
                            x: 0,
                            y: 0,
                            dx: 0,
                            dy: 0,
                            r: 4,
                            posX: positions[i].x * scale_ratio,
                            posY: positions[i].y * scale_ratio,
                            bestWords: bestwords,
                            cluster: 0,
                            color: '#fff',
                            idx: i,
                            circle: layer_node.append('circle').attr({
                                cx: width / 2,
                                cy: height / 2,
                                class: 'node',
                                r: r,
                                "opacity": 0.00,
                                'stroke-width': 7 * scale_ratio + 'px',
                                'stroke': 'transparent',
                                idx: i,
                            }),
                        }
                        addNodeEvent(data);
                        nodes.push(data);
                    }


                    for (var i = 0; i < nodes.length; i++) {
                        nodes[i].cluster = clusterArr[i] + 1;
                        switch (nodes[i].cluster) {
                            case 1:
                                    if(inverse)
                                        nodes[i].color = 0xbcbcbc;
                                    else
                                        nodes[i].color = 0x050505;
                                break;
                            case 2:
                                nodes[i].color = 0x5096D1;
                                break;
                            case 3:
                                nodes[i].color = 0xEE3E24;
                                break;
                            case 4:
                                nodes[i].color = 0x2F9345;
                                break;
                            case 5:
                                nodes[i].color = 0x355B4B;
                                break;
                            case 6:
                                nodes[i].color = 0xE07D25;
                                break;
                            case 7:
                                nodes[i].color = 0xE7BD17;
                                break;
                            case 8:
                                nodes[i].color = 0xB0C351;
                                break;
                            case 9:
                                nodes[i].color = 0xAA1D54;
                                break;
                            case 10:
                                nodes[i].color = 0xDF1686;
                                break;
                            case 11:
                                nodes[i].color = 0x612E89;
                                break;
                            default:
                                nodes[i].color = 0xe0e0e0;

                        }


                        if (inverse) nodes[i].color += 0x101010;

                        nodes[i].color = nodes[i].color.toString(16);
                        nodes[i].circle.attr('fill', '#' + nodes[i].color);
                    }

                }

                function makeEdge() {
                    for (var i = 0; i < movieMatrix.length; i++) {
                        var thisMovie = movieMatrix[i];
                        for (var r = i + 1; r < 676; r++) {
                            if (thisMovie[r] > 0.915) {
                                var data = {
                                    origin: i,
                                    target: r - 1,
                                    value: thisMovie[r],
                                }
                                edges.push(data);

                                nodes[i].r += 0.05;
                                nodes[r - 1].r += 0.05;

                            }
                        }
                    }
                }

                function drawEdges() {
                    var i = 0;
                    edges.forEach(function (e) {
                        e.edge = layer_edge.append('line').attr({
                            x1: nodes[e.origin].posX,
                            y1: nodes[e.origin].posY,
                            x2: nodes[e.target].posX,
                            y2: nodes[e.target].posY,
                            stroke: '#888888',
                            'stroke-width': 0.5 * scale_ratio,
                            "stroke-opacity": 0.00,

                        })
                        i++;
                        e.edge.transition().duration(100).delay(3500 + i * 2).attr(
                                {"stroke-opacity": 0.15});
                        e.edge.transition().duration(1000).delay(4000 + i * 2).attr(
                                {"stroke-opacity": inverse == true ? 0.55 : 0.65});
                    })


                }

                var host = window.location.hostname;


                function addImage(x, y, name, w, h) {
                    if (w == undefined) w = 512;
                    if (h == undefined) h = 512;

                    w *= scale_ratio * 1.11;
                    h *= scale_ratio * 1.11;
                    x *= scale_ratio * 1.11;
                    y *= scale_ratio * 1.11;
                    return layer_image.append('image')
                            .attr("x", x)
                            .attr("y", y)
                            .attr("fill", '#000000')
                            .attr("xlink:href", "/visualization/cosmovis/images/" + name + ".png")
                            .attr("width", w + 'px')
                            .attr("height", h + 'px')
                            .style('opacity', inverse == true ? 0.5 : 0.8)
                }

                function drawBackground() {
                    addImage(850, 20, 'jackinthebox', 550, 550);
                    addImage(700, 270, 'mermaid', 1000, 1000);
                    addImage(535, 30, 'reaper', 600, 600);
                    addImage(200, 400, 'redpyramid', 600, 600);
                    addImage(950, 475, 'whale', 500, 500);
                    addImage(1500, 150, 'wine');


                }


                function getDirectionAndDist(x1, y1, x2, y2) {
                    var dx = x1 - x2;
                    var dy = y1 - y2;
                    var dist = Math.sqrt(dx * dx + dy * dy);

                    dx /= dist;
                    dy /= dist;
                    var success = true;
                    if (dist == 0) success = false;

                    return {
                        dx: dx,
                        dy: dy,
                        dist: dist,
                        success: success,
                    }
                }

                function flok() {
                    for (var c = 0; c < 2; c++) {
                        for (var i = 0; i < nodes.length; i++) {
                            for (var j = i + 1; j < nodes.length; j++) {
                                if (i == j) continue;
                                var geo = getDirectionAndDist(nodes[i].posX, nodes[i].posY,
                                        nodes[j].posX, nodes[j].posY)

                                if (isNaN(geo.dist) || isNaN(geo.dx) || isNaN(geo.dy)) continue;

                                var std = 10 * ratio;
                                if (geo.dist < std) {
                                    nodes[j].posX -= geo.dx * (std - geo.dist) / 2;
                                    nodes[j].posY -= geo.dy * (std - geo.dist) / 2;
                                    nodes[i].posX += geo.dx * (std - geo.dist) / 2;
                                    nodes[i].posY += geo.dy * (std - geo.dist) / 2;
                                }
                            }
                        }
                    }
                }


                function drawNodes() {
                    var i = 0;
                    nodes.forEach(function (e) {
                        var r = e.r * scale_ratio;
                        i++;

                        e.circle.attr({
                            'cx': (e.posX - width / 2) * 0.5 + width / 2,
                            'cy': (e.posY - height / 2) * 0.5 + height / 2,
                        });

                        e.circle.transition().duration(2000).delay(i * 2).attr({
                            'cx': e.posX,
                            'cy': e.posY,
                            "opacity": 1.00,
                            'r': e.r * scale_ratio,
                        });


                    })
                }

                drawBackground();
                initNodes();
                drawAnchor();
                //updatePosition();
                makeEdge();

                flok();
                drawNodes();

                drawEdges();





            }

            showModal();
            var cnt = 0;
            var progress = 0;
            for (var i = 0; i < 4; i++) {
                setTimeout(function () {
                    progress += 25;
                    progressChange(progress)

                }, 1000 * (i + 1));
            }

            setTimeout(function () {
                //hideModal();
                //reset();
            }, 4500)

            hideModal();
            reset();















