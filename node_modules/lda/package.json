{
  "name": "lda",
  "version": "0.1.5",
  "description": "LDA topic modeling for node.js.",
  "author": {
    "name": "Kory Becker",
    "email": "kbecker@primaryobjects.com",
    "url": "http://www.primaryobjects.com/kory-becker"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/primaryobjects/lda.git"
  },
  "main": "./lib",
  "dependencies": {
    "stem-porter": "*"
  },
  "engines": {
    "node": ">= 0.8.x"
  },
  "licenses": [
    {
      "type": "Apache",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "keywords": [
    "lda",
    "Latent Dirichlet allocation",
    "Latent Dirichlet",
    "Dirichlet",
    "machine learning",
    "ml",
    "artificial intelligence",
    "natural language processing",
    "natural language",
    "topic model",
    "topic modeling",
    "topic modelling",
    "nlp",
    "topics",
    "document",
    "words"
  ],
  "_id": "lda@0.1.5",
  "_from": "lda@",
  "readme": "ï»¿LDA\n--------\n\nLatent Dirichlet allocation (LDA) topic modeling in javascript for node.js.\nLDA is a machine learning algorithm that extracts topics and their related keywords from a collection of documents.\n\nIn LDA, a document may contain several different topics, each with their own related terms. The algorithm uses a probabilistic model for detecting the number of topics specified and extracting their related keywords. For example, a document may contain topics that could be classified as beach-related and weather-related. The beach topic may contain related words, such as sand, ocean, and water. Similarly, the weather topic may contain related words, such as sun, temperature, and clouds.\n\nSee http://en.wikipedia.org/wiki/Latent_Dirichlet_allocation\n\n```bash\n$ npm install lda\n```\n\n## Usage\n```javascript\nvar lda = require('lda');\n\n// Example document.\nvar text = 'Cats are small. Dogs are big. Cats like to chase mice. Dogs like to eat bones.';\n\n// Extract sentences.\nvar documents = text.match( /[^\\.!\\?]+[\\.!\\?]+/g );\n\n// Run LDA to get terms for 2 topics (5 terms each).\nvar result = lda(documents, 2, 5);\n```\n\nThe above example produces the following result with two topics (topic 1 is \"cat-related\", topic 2 is \"dog-related\"):\n```\nTopic 1\ncats (0.21%)\ndogs (0.19%)\nsmall (0.1%)\nmice (0.1%)\nchase (0.1%)\n\nTopic 2\ndogs (0.21%)\ncats (0.19%)\nbig (0.11%)\neat (0.1%)\nbones (0.1%)\n```\n\n## Output\n\nLDA returns an array of topics, each containing an array of terms. The result contains the following format:\n\n```\n[ [ { term: 'dogs', probability: 0.2 },\n    { term: 'cats', probability: 0.2 },\n    { term: 'small', probability: 0.1 },\n    { term: 'mice', probability: 0.1 },\n    { term: 'chase', probability: 0.1 } ],\n  [ { term: 'dogs', probability: 0.2 },\n    { term: 'cats', probability: 0.2 },\n    { term: 'bones', probability: 0.11 },\n    { term: 'eat', probability: 0.1 },\n    { term: 'big', probability: 0.099 } ] ]\n```\n\nThe result can be traversed as follows:\n\n```javascript\nvar result = lda(documents, 2, 5);\n\n// For each topic.\nfor (var i in result) {\n\tvar row = result[i];\n\tconsole.log('Topic ' + (parseInt(i) + 1));\n\t\n\t// For each term.\n\tfor (var j in row) {\n\t\tvar term = row[j];\n\t\tconsole.log(term.term + ' (' + term.probability + '%)');\n\t}\n\t\n\tconsole.log('');\n}\n```\n\n## Author\n\nKory Becker\nhttp://www.primaryobjects.com\n\nBased on original javascript implementation\nhttps://github.com/awaisathar/lda.js\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/primaryobjects/lda/issues"
  },
  "homepage": "https://github.com/primaryobjects/lda"
}
